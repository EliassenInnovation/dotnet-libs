# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

parameters:
  - name: buildConfiguration
    displayName: Build Configuration Type
    type: string
    default: Release
    values:
    - Release
    - Debug
- 
trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  - name: solution
    value: '**/*.sln'
  - name: buildPlatform
    value: 'Any CPU'
  - name: nugetRepository
    value: 'https://pkgs.dev.azure.com/lightwellinc-clouddev/Lightwell-Nucleus/_packaging/Eliassen.Nucleus.Net.Libs/nuget/v3/index.json'
    
steps:
- checkout: self
  clean: true
  persistCredentials: true
  fetchDepth: 0

- task: UseDotNet@2
  displayName: 'Install .Net 8.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'       
                  
- task: gitversion/setup@0
  displayName: Install GitVersion
  inputs:
    versionSpec: '5.12.x'    
    preferLatestVersion: true

- task: gitversion/execute@0
  displayName: Use GitVersion
  inputs:
    useConfigFile: true
    configFilePath: 'GitVersion.yml'
    
- task: NuGetAuthenticate@1
  displayName: 'NuGet Authenticate'

- task: PowerShell@2
  displayName: Set Version Variables
  inputs:
    targetType: 'inline'
    script: |
            $fullSemVerLower = "$(fullSemVer)".ToLower()  
            $fullSemVerLowerTag = "libs-$(fullSemVer)".ToLower()  
            Write-Host "FullSemVerLower=$fullSemVerLower"
            Write-Host "FullSemVerLowerTag=$fullSemVerLowerTag"
            Write-Host "##vso[build.updatebuildnumber]$fullSemVerLower"
            Write-Host "##vso[task.setvariable variable=FullSemVerLower;issecret=false]$fullSemVerLower" 
            Write-Host "##vso[task.setvariable variable=FullSemVerLowerTag;issecret=false]$fullSemVerLowerTag"  
            Write-Host "##vso[task.setvariable variable=WebAppPackagePath;issecret=false]$(build.artifactStagingDirectory)\WebApp.zip"  
            Write-Host "##vso[task.setvariable variable=TestResultsPath;issecret=false]$(Agent.TempDirectory)"  
            Write-Host "##vso[task.setvariable variable=TestDataPath;issecret=false]$(Build.SourcesDirectory)\Conf\MongoDb\SampleData"

- task: DotNetCoreCLI@2
  displayName: Dotnet Restore for API Services and Azure Functions
  inputs:
    command: restore
    projects: $(solution)
    arguments: >
      --configuration ${{parameters.buildConfiguration}}
      --nologo 
    feedsToUse: 'select'
    vstsFeed: '5f757354-fbf9-4fe2-9464-d0b4a3d8aabd/68967c6e-0e04-43b3-90ed-0933cbac5a61'

- task: DotNetCoreCLI@2
  displayName: Dotnet Build for API Services, Azure Functions and Data Projects
  inputs:
    command: build
    projects: $(solution)
    arguments: >
      --configuration ${{parameters.buildConfiguration}} 
      --property:Version=$(FullSemVer) 
      --nologo 
      --no-restore
      
- task: DotNetCoreCLI@2
  displayName: Run Unit Tests as ${{parameters.buildConfiguration}}
  inputs:
    command: 'test'
    projects: '$(solution)'
    arguments: >
      --configuration ${{parameters.buildConfiguration}} 
      --no-build 
      --no-restore 
      --nologo 
      --filter "TestCategory=Unit|TestCategory=Simulate" 
      --collect:"XPlat Code Coverage" 
      --settings "$(Build.SourcesDirectory)\.runsettings"
    publishTestResults: true
    # --results-directory "$(TestResultsPath)"
    
- task: DotNetCoreCLI@2
  displayName: Coverage Tool Install
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: >
      install 
      dotnet-coverage 
      --global      
    
- task: DotNetCoreCLI@2
  displayName: Merge Test Results
  inputs:
    command: 'custom'
    custom: 'coverage'
    workingDirectory: '$(TestResultsPath)'
    arguments: >
      merge 
      coverage.*.xml 
      --recursive 
      --output .\Cobertura.coverage 
      --output-format cobertura
     
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Coverage Reports'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: $(TestResultsPath)\Cobertura.coverage
    failIfCoverageEmpty: false 


- task: DotNetCoreCLI@2
  displayName: Package to Staging directory
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    command: custom
    custom: 'pack'
    projects: $(solution)
    arguments: >
      --configuration ${{parameters.buildConfiguration}} 
      --no-build 
      --no-restore 
      --output $(Build.ArtifactStagingDirectory)/Packages 
      --property:Version=$(FullSemVer) 
    verbosityRestore: Minimal
    verbosityPack: Minimal
    feedsToUse: select
    vstsFeed: personalnugetfeed
    nuGetFeedType: internal
    includeNuGetOrg: true

- script: |
        dotnet nuget push --skip-duplicate --source $(nugetRepository) --api-key az $(Build.ArtifactStagingDirectory)\Packages\*.nupkg
  displayName: 'NuGet Push Packages'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) 

- task: PublishSymbols@2
  displayName: 'Publish Symbols'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    SearchPattern: '**/bin/**/*.pdb'
    IndexSources: false
    SymbolServerType: 'TeamServices'
    TreatNotIndexedAsWarning: true
    
- task: tagBuildOrRelease@0
  displayName: 'Tag Build'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    type: 'Build'
    tags: |
        $(FullSemVerLowerTag)
        ${{parameters.buildConfiguration}} 
    
# https://dina-muscanell.com/blog/set-git-tags-with-azure-devops/
# https://stackoverflow.com/questions/59226055/setting-git-tag-from-azure-devops-build-pipeline-on-complete
# make sure the build service account is granted "Create Tag" and "Contribute" under repository security
- script: |
          git config --global user.name "AzureDevOps Agent"
          git tag "$(FullSemVerLowerTag)" --force
          git push origin "$(FullSemVerLowerTag)" --force
          echo "Tagging $(Build.Repository.Name) with $(FullSemVerLowerTag)"
  displayName: 'Tag Code'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

#TODO: add push to artifact store/nuget 