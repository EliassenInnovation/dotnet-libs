# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

parameters:
  - name: doDeployment
    displayName: Deploy To Environment 
    default: true
    type: boolean
  - name: targetEnvironment
    displayName: Target Environment 
    type: string
    default: Test
    values:
    - Dev
    - Test
  - name: dataDeploymentType
    displayName: Data Deployment Type
    type: string
    default: Import
    values:
    - None
    - Import
    - DropCollectionAndImport

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  - name: solution
    value: '**/*.sln'
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration
    value: 'Release'  
  - group: Azure.Environment.Nucleus.Acc.Net.Api
    
steps:
- checkout: self
  clean: true
  persistCredentials: true
  fetchDepth: 0

- task: UseDotNet@2
  displayName: 'Install .Net 6.0 SDK'
  inputs:
    packageType: 'sdk'
    version: '6.0.x'       
                  
- task: gitversion/setup@0
  displayName: Install GitVersion
  inputs:
    versionSpec: '5.12.x'    
    preferLatestVersion: true

- task: gitversion/execute@0
  displayName: Use GitVersion
  inputs:
    useConfigFile: true
    configFilePath: 'GitVersion.yml'
    
- task: NuGetAuthenticate@0
  displayName: 'NuGet Authenticate'

- task: PowerShell@2
  displayName: Set Version Variables
  inputs:
    targetType: 'inline'
    script: |
            $fullSemVerLower = "$(fullSemVer)".ToLower()  
            Write-Host "FullSemVerLower=$fullSemVerLower"
            Write-Host "##vso[build.updatebuildnumber]$fullSemVerLower"
            Write-Host "##vso[task.setvariable variable=FullSemVerLower;issecret=false]$fullSemVerLower"  
                        
- task: DotNetCoreCLI@2
  displayName: 'Building $(buildConfiguration) for ${{ parameters.targetEnvironment }}'
  inputs:
    command: 'build'
    projects: '$(solution)'
    arguments: >
      --configuration $(buildConfiguration) 
      --nologo 
      --property:DeployOnBuild=true 
      --property:WebPublishMethod=Package 
      --property:PackageAsSingleFile=true 
      --property:SkipInvalidConfigurations=true 
      --property:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" 
      --property:DeployIisAppPath="Default Web Site"
      --property:Version=$(FullSemVerLower)

- task: DotNetCoreCLI@2
  displayName: Run Unit Tests as $(buildConfiguration)
  inputs:
    command: 'test'
    projects: '$(solution)'
    arguments: >
      --configuration $(buildConfiguration) 
      --no-build 
      --no-restore 
      --nologo 
      --filter "TestCategory=Unit|TestCategory=Simulate" 
      --collect:"XPlat Code Coverage" 
      --settings "$(Build.SourcesDirectory)\.runsettings"
      --property:Version=$(FullSemVerLower)
    publishTestResults: true

- task: DotNetCoreCLI@2
  displayName: DotNet Tool Restore
  inputs:
    command: 'custom'
    custom: 'tool'
    arguments: 'restore'
    
- script: dotnet tool dotnet-coverage merge coverage.*.xml --recursive --output .\Cobertura.coverage --output-format cobertura
  displayName: Merge Test Coverage Results
  workingDirectory: '$(Agent.TempDirectory)\TestResults'
  
# https://learn.microsoft.com/en-us/dotnet/core/additional-tools/dotnet-coverage
# $(Agent.TempDirectory)/**/coverage.cobertura.xml
# coverage.cobertura.xml
# dotnet dotnet-coverage merge coverage.*.xml --recursive --output

          
- task: PublishCodeCoverageResults@1
  displayName: 'Publish Code Coverage Reports'
  inputs:
    codeCoverageTool: 'cobertura'
    summaryFileLocation: $(Agent.TempDirectory)\TestResults\Cobertura.coverage
    failIfCoverageEmpty: false 

- task: AzureRmWebAppDeployment@4
  condition: and(succeeded(), eq('${{ parameters.doDeployment }}', true))
  displayName: 'Deploying API to ${{ parameters.targetEnvironment }}'
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'AppDev Project Nucleus'
    appType: 'webApp'
    WebAppName: '$(${{parameters.targetEnvironment}}-ServerName)'
    packageForLinux: '$(build.artifactStagingDirectory)\WebApp.zip'

# This is an example step to do a data deployment as part of application deployment
- task: DotNetCoreCLI@2
  condition: and(succeeded(), eq('${{ parameters.doDeployment }}', true), ne('${{ parameters.dataDeploymentType }}', 'None'))
  displayName: 'Deploying Data to ${{ parameters.targetEnvironment }}'
  inputs:
    command: 'run'
    projects: 'Tools\Nucleus.Dataloader.Cli'
    arguments: >
      --configuration $(buildConfiguration) 
      --no-build 
      --no-restore 
      --nologo 
      --
      --SourcePath="$(Build.SourcesDirectory)\Conf\MongoDb\SampleData"
      --Action=${{ parameters.dataDeploymentType }}
      --ConnectionString="$(${{parameters.targetEnvironment}}-MongoDatabase__ConnectionString)"
      --DatabaseName="$(${{parameters.targetEnvironment}}-MongoDatabase__DatabaseName)"

- task: tagBuildOrRelease@0
  displayName: 'Tag Build'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  inputs:
    type: 'Build'
    tags: '$(FullSemVerLower)'
    
# https://dina-muscanell.com/blog/set-git-tags-with-azure-devops/
# https://stackoverflow.com/questions/59226055/setting-git-tag-from-azure-devops-build-pipeline-on-complete
# make sure the build service account is granted "Create Tag" and "Contribute" under repository security
- script: |
          git config --global user.name "AzureDevOps Agent"
          git tag "$(FullSemVerLower)" --force
          git push origin "$(FullSemVerLower)" --force
          echo "Tagging $(Build.Repository.Name) with $(FullSemVerLower)"
  displayName: 'Tag Code'
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

- task: PublishBuildArtifacts@1
  displayName: Publish Artifact
  inputs:
    PathtoPublish: '$(build.artifactStagingDirectory)\WebApp.zip'
    ArtifactName: Web Application
    