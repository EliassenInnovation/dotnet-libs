# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

parameters:
  - name: doDeployment
    displayName: Deploy To Environment 
    default: true
    type: boolean
  - name: targetEnvironment
    displayName: Target Environment 
    type: string
    default: Test
    values:
    - Dev
    - Test
  - name: dataDeploymentType
    displayName: Data Deployment Type
    type: string
    default: Import
    values:
    - None
    - Import
    - DropCollectionAndImport

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  ${{if eq(parameters.targetEnvironment, 'Dev')}}: 
    - name: apiservice
      value: 'nucleusaccnetdevapi'
  ${{elseif eq(parameters.targetEnvironment, 'Test')}}: 
    - name: apiservice
      value: 'nucleusaccnetapi'
  - name: solution
    value: '**/*.sln'
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration
    value: 'Release'
# import variable values from library group    
  - group: 'Azure.Environment.Nucleus.Acc.Net.Api'
  
steps:
- task: NuGetToolInstaller@1

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: 'Building ${{ parameters.targetEnvironment }}'
  inputs:
    solution: '$(solution)'
    msbuildArgs: >
      /p:DeployOnBuild=true 
      /p:WebPublishMethod=Package 
      /p:PackageAsSingleFile=true 
      /p:SkipInvalidConfigurations=true 
      /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" 
      /p:DeployIisAppPath="Default Web Site"
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Run Unit Tests as $(buildConfiguration)
  inputs:
    command: 'test'
    projects: '$(solution)'
    arguments: >
      --configuration $(buildConfiguration) 
      --no-build 
      --no-restore 
      --filter "TestCategory=Unit|TestCategory=Simulate" 
      --collect:"XPlat Code Coverage" 
      --nologo 
      --settings "$(Build.SourcesDirectory)\.runsettings"
    publishTestResults: true

- task: AzureRmWebAppDeployment@4
  condition: and(succeeded(), eq('${{ parameters.doDeployment }}', true))
  displayName: 'Deploying API to ${{ parameters.targetEnvironment }}'
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'AppDev Project Nucleus'
    appType: 'webApp'
    WebAppName: '$(apiservice)'
    packageForLinux: '$(build.artifactStagingDirectory)\WebApp.zip'

# TODO: taskto execute dataloader


${{if eq(parameters.targetEnvironment, 'Dev')}}: 
  - task: DotNetCoreCLI@2
    condition: and(succeeded(), eq('${{ parameters.doDeployment }}', true))
    inputs:
      command: 'run'
      projects: 'Tools\Nucleus.Dataloader.Cli'
      arguments: >
        --SourcePath=.\Conf\MongoDb\SampleData 
        --Action=DropCollectionAndImport
      env: 
        MongoDatabase__ConnectionString: $(${{parameters.targetEnvironment}}-MongoDatabase__ConnectionString)
        MongoDatabase__DatabaseName: $(${{parameters.targetEnvironment}}-MongoDatabase__DatabaseName)