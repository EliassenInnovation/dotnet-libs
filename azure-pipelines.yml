# ASP.NET Core (.NET Framework)
# Build and test ASP.NET Core projects targeting the full .NET Framework.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

parameters:
  - name: doDeployment
    displayName: Deploy To Environment 
    default: true
    type: boolean
  - name: targetEnvironment
    displayName: Target Environment 
    type: string
    default: Test
    values:
    - Dev
    - Test
  - name: dataDeploymentType
    displayName: Data Deployment Type
    type: string
    default: Import
    values:
    - None
    - Import
    - DropCollectionAndImport

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  - name: solution
    value: '**/*.sln'
  - name: buildPlatform
    value: 'Any CPU'
  - name: buildConfiguration
    value: 'Release'  
  - group: Azure.Environment.Nucleus.Acc.Net.Api

  
steps:
- task: NuGetToolInstaller@1

- task: CmdLine@2
  inputs:
    script: |
      echo "Structure of work folder of this pipeline:"
      tree $(Agent.WorkFolder)\1 /f
      
      echo "Build.ArtifactStagingDirectory:" 
      
      echo "$(Build.ArtifactStagingDirectory)"
      
      echo "Build.BinariesDirectory:" 
      
      echo "$(Build.BinariesDirectory)"
      
      echo "Build.SourcesDirectory:"
      
      echo "$(Build.SourcesDirectory)"

- task: NuGetCommand@2
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: 'Building ${{ parameters.targetEnvironment }}'
  inputs:
    solution: '$(solution)'
    msbuildArgs: >
      /p:DeployOnBuild=true 
      /p:WebPublishMethod=Package 
      /p:PackageAsSingleFile=true 
      /p:SkipInvalidConfigurations=true 
      /p:DesktopBuildPackageLocation="$(build.artifactStagingDirectory)\WebApp.zip" 
      /p:DeployIisAppPath="Default Web Site"
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  displayName: Run Unit Tests as $(buildConfiguration)
  inputs:
    command: 'test'
    projects: '$(solution)'
    arguments: >
      --configuration $(buildConfiguration) 
      --no-build 
      --no-restore 
      --nologo 
      --filter "TestCategory=Unit|TestCategory=Simulate" 
      --collect:"XPlat Code Coverage" 
      --settings "$(Build.SourcesDirectory)\.runsettings"
    publishTestResults: true

- task: AzureRmWebAppDeployment@4
  condition: and(succeeded(), eq('${{ parameters.doDeployment }}', true))
  displayName: 'Deploying API to ${{ parameters.targetEnvironment }}'
  inputs:
    ConnectionType: 'AzureRM'
    azureSubscription: 'AppDev Project Nucleus'
    appType: 'webApp'
    WebAppName: '$(${{parameters.targetEnvironment}}-ServerName)'
    packageForLinux: '$(build.artifactStagingDirectory)\WebApp.zip'

- task: DotNetCoreCLI@2
  condition: and(succeeded(), eq('${{ parameters.doDeployment }}', true), ne('${{ parameters.dataDeploymentType }}', 'None'))
  displayName: 'Deploying Data to ${{ parameters.targetEnvironment }}'
  inputs:
    command: 'run'
    projects: 'Tools\Nucleus.Dataloader.Cli'
    arguments: >
      --configuration $(buildConfiguration) 
      --no-build 
      --no-restore 
      --nologo 
      --SourcePath="$(Build.SourcesDirectory)\Conf\MongoDb\SampleData"
      --Action=${{ parameters.dataDeploymentType }}
      --ConnectionString="$(${{parameters.targetEnvironment}}-MongoDatabase__ConnectionString)"
      --DatabaseName="$(${{parameters.targetEnvironment}}-MongoDatabase__DatabaseName)"