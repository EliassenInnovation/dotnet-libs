# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

# name: .NET
# https://docs.github.com/en/actions/learn-github-actions/contexts#vars-context
# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#run-name
run-name: .NET ${{ inputs.build-configuration }}/${{ inputs.build-platform }} by @${{ github.actor }}

on:
  push:
    branches:
    - master
    - main

  pull_request:
    branches:
    - master
    - main

  # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#onpull_requestpull_request_targetbranchesbranches-ignore
  workflow_dispatch:
    inputs:
      build-configuration: 
        description: 'Build Configuration'
        required: true
        default: 'Release'
        type: choice
        options:
          - Release
          - Debug
      build-platform: 
        description: 'Build Platform'
        required: true
        default: 'windows-latest'
        type: choice
        options:
          - windows-latest
          - ubuntu-latest
          - macos-latest

jobs:
  build:
    runs-on: "${{ inputs.build-platform }}"

    steps:
      # https://github.com/actions/checkout
    - uses: actions/checkout@v4.1.1
      with:
        clean: true
        persist-credentials: true
        fetch-depth: 0

      # https://github.com/actions/setup-dotnet
    - name: Install .Net 8.0 SDK
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 8.0.x        

      # https://github.com/GitTools/actions/blob/main/docs/examples/github/gitversion/setup/usage-examples.md
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v0
      with:
        versionSpec: '5.x'  

      # https://github.com/GitTools/actions/blob/main/docs/examples/github/gitversion/execute/usage-examples.md 
    - name: Use GitVersion
      uses: gittools/actions/gitversion/execute@v0
      id:   gitversion
      with:
        useConfigFile: true
        configFilePath: GitVersion.yml
    
      # https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/
      # https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsshell
      # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions?tool=powershell
    - name: Set Version Variables
      id: calculate-version
      shell: pwsh
      run: |
        $fullSemVerLower = "${{ steps.gitversion.outputs.fullSemVer }}".ToLower() 
        if ("${{ inputs.build-configuration }}" -eq "Debug") {
            $fullSemVerLower = "${{ steps.gitversion.outputs.majorMinorPatch }}${{ steps.gitversion.outputs.preReleaseLabelWithDash }}-debug.${{ steps.gitversion.outputs.preReleaseNumber }}"
        }        
        echo "GITHUB_WORKSPACE=$env:GITHUB_WORKSPACE"
        echo "FullSemVerLower=$fullSemVerLower"
        echo "FullSemVerLower=$fullSemVerLower" >> "$env:GITHUB_OUTPUT"
        echo "FullSemVerLower=$fullSemVerLower" >> "$env:GITHUB_ENV"

    # - name: get variables
    #   run: env      
  
    - name: Restore dependencies
      run: dotnet restore

    - name: Dotnet Build for Libraries
      run: >
        dotnet build
        --configuration ${{ inputs.build-configuration }}
        --property:Version=${{ steps.calculate-version.outputs.FullSemVerLower }}
        --nologo 
        --no-restore
        
    - name: Test
      run: >
        dotnet test
        --configuration ${{ inputs.build-configuration }} 
        --no-build 
        --no-restore 
        --nologo 
        --filter "TestCategory=Unit|TestCategory=Simulate" 
        --collect:"XPlat Code Coverage" 
        --settings "$env:GITHUB_WORKSPACE\.runsettings"

#     publishTestResults: true

    
# - task: DotNetCoreCLI@2
#   displayName: Coverage Tool Install
#   inputs:
#     command: 'custom'
#     custom: 'tool'
#     arguments: >
#       install 
#       dotnet-coverage 
#       --global      
    
# - task: DotNetCoreCLI@2
#   displayName: Merge Test Results
#   inputs:
#     command: 'custom'
#     custom: 'coverage'
#     workingDirectory: '$(TestResultsPath)'
#     arguments: >
#       merge 
#       coverage.*.xml 
#       --recursive 
#       --output .\Cobertura.coverage 
#       --output-format cobertura
     
# - task: PublishCodeCoverageResults@1
#   displayName: 'Publish Coverage Reports'
#   inputs:
#     codeCoverageTool: 'cobertura'
#     summaryFileLocation: $(TestResultsPath)\Cobertura.coverage
#     failIfCoverageEmpty: false 

    - name: Package to Staging directory
      run: >
        dotnet pack
        --configuration ${{ inputs.build-configuration }}
        --no-build 
        --no-restore 
        --output "$env:GITHUB_WORKSPACE/Packages"
        --property:Version=${{ steps.calculate-version.outputs.fullSemVerLower }}

##TODO: Attach to build/Create release        


# - script: |
#         dotnet nuget push --skip-duplicate --source $(nugetRepository) --api-key az $(Build.ArtifactStagingDirectory)\Packages\*.nupkg
#   displayName: 'NuGet Push Packages'
#   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest')) 

# - task: PublishSymbols@2
#   displayName: 'Publish Symbols'
#   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
#   inputs:
#     SearchPattern: '**/bin/**/*.pdb'
#     IndexSources: false
#     SymbolServerType: 'TeamServices'
#     TreatNotIndexedAsWarning: true

    - uses: hole19/git-tag-action@master
      if: github.ref != 'refs/heads/master' && github.event_name != 'pull_request'
      env:
        TAG: ${{ steps.calculate-version.outputs.FullSemVerLower }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#    - name: Commit Tag
#      if: github.ref != 'refs/heads/master' && github.event_name != 'pull_request'
#      uses: EndBug/add-and-commit@v5
#      with:
#        message: '${{ steps.calculate-version.outputs.FullSemVerLower }} - ${{ inputs.build-configuration }}'
#        tag: ${{ steps.calculate-version.outputs.FullSemVerLower }}
#      env:
#        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
# # https://dina-muscanell.com/blog/set-git-tags-with-azure-devops/
# # https://stackoverflow.com/questions/59226055/setting-git-tag-from-azure-devops-build-pipeline-on-complete
# # make sure the build service account is granted "Create Tag" and "Contribute" under repository security
# - script: |
#           git config --global user.name "AzureDevOps Agent"
#           git tag "$(FullSemVerLowerTag)" --force
#           git push origin "$(FullSemVerLowerTag)" --force
#           echo "Tagging $(Build.Repository.Name) with $(FullSemVerLowerTag)"
#   displayName: 'Tag Code'
#   condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
